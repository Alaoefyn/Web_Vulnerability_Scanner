from flask import Blueprint, render_template, redirect, url_for, request, flash
from flask_login import login_user, logout_user, login_required, current_user
from .models import User
from . import db
from werkzeug.security import generate_password_hash
import random
import string

auth = Blueprint('auth', __name__)

def generate_reset_token():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=20))

reset_tokens = {}

@auth.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        user = User.query.filter_by(email=email).first()
        if user and user.check_password(password):
            login_user(user)
            return redirect(url_for('main.index'))
        flash('Invalid email or password')
    return render_template('login.html')

@auth.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        user = User.query.filter_by(email=email).first()
        if user:
            flash('Email address already exists')
            return redirect(url_for('auth.signup'))
        new_user = User(email=email)
        new_user.set_password(password)
        db.session.add(new_user)
        db.session.commit()
        login_user(new_user)
        return redirect(url_for('main.index'))
    return render_template('signup.html')

@auth.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    if request.method == 'POST':
        new_password = request.form.get('password')
        if new_password:
            current_user.set_password(new_password)
            db.session.commit()
            flash('Password updated successfully')
        else:
            flash('Please provide a valid password')
    return render_template('profile.html', user=current_user)

@auth.route('/reset_password', methods=['GET', 'POST'])
def reset_password():
    if request.method == 'POST':
        email = request.form.get('email')
        user = User.query.filter_by(email=email).first()
        if user:
            reset_token = generate_reset_token()
            reset_tokens[email] = reset_token
            flash(f"Reset token: {reset_token}")  
        else:
            flash('Email not found')
    return render_template('reset_password.html')

@auth.route('/reset/<token>', methods=['GET', 'POST'])
def reset(token):
    email = next((email for email, t in reset_tokens.items() if t == token), None)
    if not email:
        flash('Invalid or expired reset token')
        return redirect(url_for('auth.reset_password'))
    user = User.query.filter_by(email=email).first()
    if request.method == 'POST':
        new_password = request.form.get('password')
        if new_password:
            user.set_password(new_password)
            db.session.commit()
            flash('Password reset successfully')
            reset_tokens.pop(email, None)  
            return redirect(url_for('auth.login'))
    return render_template('set_new_password.html')

@auth.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('main.index'))
